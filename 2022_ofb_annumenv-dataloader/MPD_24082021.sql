CREATE SCHEMA annumenv ;
CREATE SCHEMA annumenv_part_cells ;
CREATE SCHEMA annumenv_part_indices ;

CREATE TABLE 
	annumenv.extents
	(
		id_extent INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL,
		description TEXT
	);	

CREATE TABLE 
	annumenv.extent_modalities
	(
		id_extent_modality INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		id_extent INTEGER,
		name VARCHAR(50) UNIQUE NOT NULL,
		description TEXT,   
		CONSTRAINT fk_extents_1 FOREIGN KEY(id_extent) REFERENCES annumenv.extents(id_extent) ON DELETE CASCADE
	);

CREATE INDEX ON annumenv.extent_modalities(id_extent);


CREATE TABLE 
	annumenv.grids
	(
		id_grid INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		grid_code VARCHAR(128), -- code spécifique "métier", dénomination interne au SI référentiel importé
		name VARCHAR(50) UNIQUE NOT NULL,
		description TEXT
	);

CREATE INDEX ON annumenv.grids(grid_code);

CREATE TABLE 
	annumenv.cells
	(
		id_cell BIGINT PRIMARY KEY, 
		cell_code VARCHAR(128), -- code spécifique "métier", dénomination interne au SI référentiel importé
		id_grid INTEGER,
		geom GEOMETRY, 
		CONSTRAINT fk_cells_1 FOREIGN KEY(id_grid) REFERENCES annumenv.grids(id_grid) ON DELETE CASCADE
	)
	PARTITION BY RANGE (id_grid);

	
CREATE INDEX ON annumenv.cells(cell_code);
CREATE INDEX ON annumenv.cells(id_cell);
CREATE INDEX ON annumenv.cells USING GIST(geom);

CREATE TABLE
	annumenv.cells_x_extent_modalities
	(
		id_cell BIGINT,
		id_extent_modality INTEGER,
		PRIMARY KEY(id_cell,id_extent_modality),
		CONSTRAINT fk_cells_x_extent_modalities_1 FOREIGN KEY(id_cell) REFERENCES annumenv.cells(id_cell) ON DELETE CASCADE,
		CONSTRAINT fk_cells_x_extent_modalities_2 FOREIGN KEY(id_extent_modality) REFERENCES annumenv.extent_modalities(id_extent_modality) ON DELETE CASCADE
	);
CREATE INDEX ON annumenv.cells_x_extent_modalities(id_cell);
CREATE INDEX ON annumenv.cells_x_extent_modalities(id_extent_modality);

CREATE TABLE
	annumenv.legend_types
	(
		id_legend_type INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL
	);
	
CREATE TABLE
	annumenv.legends
	(
		id_legend INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		id_legend_type INTEGER,
		content TEXT,
		CONSTRAINT fk_legends_1 FOREIGN KEY(id_legend_type) REFERENCES annumenv.legend_types(id_legend_type) ON DELETE CASCADE
	);
CREATE INDEX ON annumenv.legends(id_legend_type);

CREATE TABLE
	annumenv.topic_types
	(
		id_topic_type INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL	
	);

CREATE TABLE
	annumenv.topics
	(
		id_topic INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		id_topic_type INTEGER, 
		name VARCHAR(50) UNIQUE NOT NULL,
		id_legend INTEGER,
		info JSONB,
		CONSTRAINT fk_legends_1 FOREIGN KEY(id_legend) REFERENCES annumenv.legends(id_legend) ON DELETE SET NULL,
		CONSTRAINT fk_legends_2 FOREIGN KEY(id_topic_type) REFERENCES annumenv.topic_types(id_topic_type) ON DELETE SET NULL
	);
CREATE INDEX ON annumenv.topics(id_legend);

CREATE TABLE
	annumenv.variables
	(
		id_variable INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL,
		id_legend INTEGER,
		info JSONB,
		CONSTRAINT fk_variables_1 FOREIGN KEY(id_legend) REFERENCES annumenv.legends(id_legend) ON DELETE SET NULL
	);
CREATE INDEX ON annumenv.variables(id_legend);

CREATE TABLE
	annumenv.indicators
	(
		id_indicator INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL,
		id_legend INTEGER,
		info JSONB,
		CONSTRAINT fk_indicators_1 FOREIGN KEY(id_legend) REFERENCES annumenv.legends(id_legend) ON DELETE SET NULL
	);
CREATE INDEX ON annumenv.indicators(id_legend);

CREATE TABLE
	annumenv.components
	(
		id_component INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		id_indicator INTEGER,
		id_topic INTEGER,
		name VARCHAR(50) UNIQUE NOT NULL,
		id_legend INTEGER,
		info JSONB,
		CONSTRAINT fk_components_1 FOREIGN KEY(id_legend) REFERENCES annumenv.legends(id_legend) ON DELETE SET NULL,
		CONSTRAINT fk_components_2 FOREIGN KEY(id_indicator) REFERENCES annumenv.indicators(id_indicator) ON DELETE SET NULL,
		CONSTRAINT fk_components_3 FOREIGN KEY(id_topic) REFERENCES annumenv.topics(id_topic) ON DELETE SET NULL
	);
CREATE INDEX ON annumenv.components(id_legend);
CREATE INDEX ON annumenv.components(id_indicator);
CREATE INDEX ON annumenv.components(id_topic);

CREATE TABLE
	annumenv.analyses
	(
		id_analysis INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL,
		id_legend INTEGER,
		id_topic INTEGER,
		info JSONB,
		CONSTRAINT fk_analyses_1 FOREIGN KEY(id_legend) REFERENCES annumenv.legends(id_legend) ON DELETE SET NULL,
		CONSTRAINT fk_analyses_2 FOREIGN KEY(id_topic) REFERENCES annumenv.topics(id_topic) ON DELETE CASCADE

	);
CREATE INDEX ON annumenv.analyses(id_legend);
CREATE INDEX ON annumenv.topics(id_topic);

CREATE TABLE
	annumenv.analyses_x_indicators
	(
		id_analysis INTEGER, 
		id_indicator INTEGER,
		CONSTRAINT fk_analyses_1 FOREIGN KEY(id_analysis) REFERENCES annumenv.analyses(id_analysis) ON DELETE CASCADE,
		CONSTRAINT fk_analyses_2 FOREIGN KEY(id_indicator) REFERENCES annumenv.indicators(id_indicator) ON DELETE CASCADE
	);
CREATE INDEX ON annumenv.analyses_x_indicators(id_analysis);
CREATE INDEX ON annumenv.analyses_x_indicators(id_indicator);

CREATE TABLE
	annumenv.analyses_x_variables
	(
		id_analysis INTEGER, 
		id_variable INTEGER,
		PRIMARY KEY(id_analysis,id_variable),
		CONSTRAINT fk_analyses_1 FOREIGN KEY(id_analysis) REFERENCES annumenv.analyses(id_analysis) ON DELETE CASCADE,
		CONSTRAINT fk_analyses_2 FOREIGN KEY(id_variable) REFERENCES annumenv.variables(id_variable) ON DELETE CASCADE
	);
CREATE INDEX ON annumenv.analyses_x_variables(id_analysis);
CREATE INDEX ON annumenv.analyses_x_variables(id_variable);

CREATE TABLE
	annumenv.factors
	(
		id_factors INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		name VARCHAR(50) UNIQUE NOT NULL,
		id_legend INTEGER,
		id_topic INTEGER,
		id_indicator INTEGER,
		info JSONB,
		CONSTRAINT fk_factors_1 FOREIGN KEY(id_legend) REFERENCES annumenv.legends(id_legend) ON DELETE SET NULL,
		CONSTRAINT fk_factors_2 FOREIGN KEY(id_topic) REFERENCES annumenv.topics(id_topic) ON DELETE CASCADE,
		CONSTRAINT fk_factors_3 FOREIGN KEY(id_indicator) REFERENCES annumenv.indicators(id_indicator) ON DELETE CASCADE
		
	);
CREATE INDEX ON annumenv.factors(id_legend);
CREATE INDEX ON annumenv.factors(id_topic);

CREATE TABLE
	annumenv.updates
	(
		id_update INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, 
		date_result TIMESTAMP,
		datasets_update BOOLEAN,
		indicators_update BOOLEAN,
		components_update BOOLEAN,
		analyses_update BOOLEAN		
	);
CREATE INDEX ON annumenv.updates(date_result);
CREATE INDEX ON annumenv.updates(datasets_update);
CREATE INDEX ON annumenv.updates(indicators_update);
CREATE INDEX ON annumenv.updates(components_update);
CREATE INDEX ON annumenv.updates(analyses_update);

CREATE TABLE
	annumenv.datasets
	(
			date_result TIMESTAMP,
			id_variable INTEGER,
			geom GEOMETRY,
			value_str VARCHAR2(255),
			value_num DOUBLE PRECISION,
			info JSONB,			
			PRIMARY KEY (date_result, id_variable),
			CONSTRAINT fk_datasets_1 FOREIGN KEY(id_variable) REFERENCES annumenv.variables(id_variable) ON DELETE CASCADE		
	)
	PARTITION BY LIST(id_variable);
CREATE INDEX ON annumenv.datasets(id_variable);
CREATE INDEX ON annumenv.datasets(date_result);
CREATE INDEX ON annumenv.datasets USING GIST(geom);

CREATE TABLE
	annumenv.indicator_results
	(
		date_result TIMESTAMP,
		id_indicator INTEGER,
		id_cell BIGINT,
		value_str VARCHAR2(255),
		value_num DOUBLE PRECISION,
		info JSONB,			
		PRIMARY KEY (date_result, id_indicator, id_cell),
		CONSTRAINT fk_indicators_1 FOREIGN KEY(id_indicator) REFERENCES annumenv.indicators(id_indicator) ON DELETE CASCADE,
		CONSTRAINT fk_cells_1 FOREIGN KEY(id_cell) REFERENCES annumenv.cells(id_cell) ON DELETE CASCADE
	)
	PARTITION BY LIST(id_indicator);
CREATE INDEX ON annumenv.indicator_results(id_indicator);	
CREATE INDEX ON annumenv.indicator_results(id_cell);
CREATE INDEX ON annumenv.indicator_results(date_result);


CREATE TABLE
	annumenv.component_results
	(
		date_result TIMESTAMP,
		id_component INTEGER,
		id_cell BIGINT,
		value_str VARCHAR2(255),
		value_num DOUBLE PRECISION,
		info JSONB,			
		PRIMARY KEY (date_result, id_component, id_cell),
		CONSTRAINT fk_components_1 FOREIGN KEY(id_component) REFERENCES annumenv.components(id_component) ON DELETE CASCADE,
		CONSTRAINT fk_cells_1 FOREIGN KEY(id_cell) REFERENCES annumenv.cells(id_cell) ON DELETE CASCADE	
	)
	PARTITION BY LIST(id_component);
CREATE INDEX ON annumenv.component_results(id_component);
CREATE INDEX ON annumenv.component_results(id_cell);
CREATE INDEX ON annumenv.component_results(date_result);

	
CREATE TABLE
	annumenv.analysis_results
	(
		date_result TIMESTAMP,
		id_analysis INTEGER,
		id_cell BIGINT,
		value_str VARCHAR2(255),
		value_num DOUBLE PRECISION,
		info JSONB,			
		PRIMARY KEY (date_result, id_analysis, id_cell),
		CONSTRAINT fk_analysiss_1 FOREIGN KEY(id_analysis) REFERENCES annumenv.analyses(id_analysis) ON DELETE CASCADE,
		CONSTRAINT fk_cells_1 FOREIGN KEY(id_cell) REFERENCES annumenv.cells(id_cell) ON DELETE CASCADE		
	)
	PARTITION BY LIST(id_analysis);
CREATE INDEX ON annumenv.analysis_results(id_analysis);
CREATE INDEX ON annumenv.analysis_results(id_cell);
CREATE INDEX ON annumenv.analysis_results(date_result);